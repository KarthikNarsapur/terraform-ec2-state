name: destroy-ec2

on:
  workflow_dispatch:
    inputs:
      region:
          description: 'AWS Region'
          required: true
      instance-id:
          description: 'Instance ID'
          required: true
      instance-state:
          description: 'Instance state (Stop/Start/Terminate)'
          required: true

permissions:
  id-token: write
  contents: read

jobs: 
  ec2-instance-stop:
    runs-on: ubuntu-latest

    if: ${{ github.event.inputs.action == 'stop' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Assume AWS Role using OIDC
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        role-to-assume: arn:aws:iam::730335384723:role/Backstage.io
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ github.event.inputs.region }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Validate
      run: terraform validate
     
    - name: Terraform Apply
      run: terraform apply -var instance-id=${{ github.event.inputs.instance-id }} -var region=${{ github.event.inputs.region }} -var instance-state=${{ github.event.inputs.instance-state }} -auto-approve

  ec2-instance-start:
    runs-on: ubuntu-latest

    if: ${{ github.event.inputs.action == 'start' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Assume AWS Role using OIDC
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        role-to-assume: arn:aws:iam::730335384723:role/Backstage.io
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ github.event.inputs.region }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Validate
      run: terraform validate
     
    - name: Terraform Apply
      run: terraform apply -var instance-id=${{ github.event.inputs.instance-id }} -var region=${{ github.event.inputs.region }} -var instance-state=${{ github.event.inputs.instance-state }} -auto-approve

  ec2-instance-terminate:
    runs-on: ubuntu-latest

    if: ${{ github.event.inputs.action == 'terminate' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Assume AWS Role using OIDC
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        role-to-assume: arn:aws:iam::730335384723:role/Backstage.io
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ github.event.inputs.region }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Destroy
      run: terraform apply -var instance-id=${{ github.event.inputs.instance-id }} -var region=${{ github.event.inputs.region }} -var instance-state=${{ github.event.inputs.instance-state }} -auto-approve
